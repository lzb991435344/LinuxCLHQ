
Google Probuff的学习    IBM网址:https://www.ibm.com/developerworks/cn/linux/l-cn-gpb/index.html

1.基本安装
tar -xzf protobuf-2.1.0.tar.gz 
cd protobuf-2.1.0 
./configure --prefix=$INSTALL_DIR 
make 
make check 
make install

2.书写  
fileName   packageName.MessageName.proto
package lm; 
message helloworld 
{ 
   required int32     id = 1;  // ID 
   required string    str = 2;  // str 
   optional int32     opt = 3;  //optional field 
}


package 名字叫做 lm，定义了一个消息 helloworld，该消息有三个成员，类型为 int32 的 id，另一个为类型为 string 的成员 str。
opt 是一个可选的成员，即消息中可以不包含该成员。


3.编译
proto 文件存放在 $SRC_DIR 下面，您也想把生成的文件放在同一个目录下
protoc -I=$SRC_DIR --cpp_out=$DST_DIR $SRC_DIR/addressbook.proto

命令将生成两个文件：

lm.helloworld.pb.h ， 定义了 C++ 类的头文件

lm.helloworld.pb.cc ， C++ 类的实现文件

在生成的头文件中，定义了一个 C++ 类 helloworld，后面的 Writer 和 Reader 将使用这个类来对消息进行操作。
诸如对消息的成员进行赋值，将消息序列化等等都有相应的方法。

4.编写reader,Writer
在 Writer 代码中，将要存入磁盘的结构化数据由一个 lm::helloworld 类的对象表示，它提供了一系列的 get/set 函数用来修改和读取结构化数据中
的数据成员，或者叫 field。当我们需要将该结构化数据保存到磁盘上时，类 lm::helloworld 已经提供相应的方法来把一个复杂的数据变成一个字节序列，我们可以将这个字节序列写入磁盘。
对于想要读取这个数据的程序来说，也只需要使用类 lm::helloworld 的相应反序列化方法来将这个字节序列重新转换会结构化数据。

exam:
Writer：
#include "lm.helloworld.pb.h"
…
 
 int main(void) 
 { 
   
  lm::helloworld msg1; 
  msg1.set_id(101); 
  msg1.set_str(“hello”); 
     
  // Write the new address book back to disk. 
  fstream output("./log", ios::out | ios::trunc | ios::binary); 
         
  if (!msg1.SerializeToOstream(&output)) { 
      cerr << "Failed to write msg." << endl; 
      return -1; 
  }         
  return 0; 
 }
Msg1 是一个 helloworld 类的对象，set_id() 用来设置 id 的值。SerializeToOstream 将对象序列化后写入一个 fstream 流。

Reader：
#include "lm.helloworld.pb.h" 
…
 void ListMsg(const lm::helloworld & msg) { 
    cout << msg.id() << endl; 
    cout << msg.str() << endl; 
 } 
  
 int main(int argc, char* argv[]) { 
    
    lm::helloworld msg1; 
    
    { 
        fstream input("./log", ios::in | ios::binary); 
        if (!msg1.ParseFromIstream(&input)) { 
        cerr << "Failed to parse address book." << endl; 
        return -1; 
        } 
    } 
    
    ListMsg(msg1); 
    … 
 }

 Reader 声明类 helloworld 的对象 msg1，然后利用 ParseFromIstream 从一个 fstream 流中读取信息并反序列化。此后，ListMsg 
 中采用 get 方法读取消息的内部信息，并进行打印输出操作。


 5.复杂的Message
 5.1 嵌套Message
    message Person { 
        required string name = 1; 
        required int32 id = 2;        // Unique ID number for this person. 
        optional string email = 3; 
        
        enum PhoneType { 
        MOBILE = 0; 
        HOME = 1; 
        WORK = 2; 
        } 
        
        message PhoneNumber { 
        required string number = 1; 
        optional PhoneType type = 2 [default = HOME]; 
        } 
        repeated PhoneNumber phone = 4; 
}

    在 Message Person 中，定义了嵌套消息 PhoneNumber，并用来定义 Person 消息中的 phone 域。

 5.2 Import Message
    在一个 .proto 文件中，还可以用 Import 关键字引入在其他 .proto 文件中定义的消息，这可以称做 Import Message
    import common.header; 
 
    message youMsg{ 
        required common.info_header header = 1; 
        required string youPrivateData = 2; 
    }
    common.info_header定义在common.header包内。

    Import Message 的用处主要在于提供了方便的代码管理机制，类似 C 语言中的头文件。您可以将一些公用的 Message 定义在一个 package 
    中，然后在别的 .proto 文件中引入该 package，进而使用其中的消息定义。


 6.动态编译
        使用 Protobuf 的人们都会先写好 .proto 文件，再用 Protobuf 编译器生成目标语言所需要的源代码文件。将这些生成的代码和应用程序一起编译。
    可是在某且情况下，人们无法预先知道 .proto 文件，他们需要动态处理一些未知的 .proto 文件。比如一个通用的消息转发中间件，它不可能预知需
    要处理怎样的消息。这需要动态编译 .proto 文件，并使用其中的 Message。
    google::protobuf::compiler 包来完成动态编译的功能。主要的类叫做 importer，定义在 importer.h 中


    Import 类对象中包含三个主要的对象，分别为处理错误的 MultiFileErrorCollector 类，定义 .proto 文件源目录的 SourceTree 类。

    code <
        google::protobuf::compiler::MultiFileErrorCollector errorCollector；
        google::protobuf::compiler::DiskSourceTree sourceTree; 
        
        google::protobuf::compiler::Importer importer(&sourceTree, &errorCollector); 
        sourceTree.MapPath("", protosrc); 
        importer.import(“lm.helloworld.proto”); //动态编译一个 .proto 文件时，只需调用 importer 对象的 import 方法
    >
    构造一个 importer 对象。构造函数需要两个入口参数，一个是 source Tree 对象，该对象指定了存放 .proto 文件的源目录。
    第二个参数是一个 error collector 对象，该对象有一个 AddError 方法，用来处理解析 .proto 文件时遇到的语法错误。

    Package google::protobuf::compiler 中提供了以下几个类，用来表示一个 .proto 文件中定义的 message，以及 Message 中的 field
    类 FileDescriptor 表示一个编译后的 .proto 文件；类 Descriptor 对应该文件中的一个 Message；类 FieldDescriptor 描述一个 Message 中的一个具体 Field。
    比如编译完 lm.helloworld.proto 之后，可以通过如下代码得到 lm.helloworld.id 的定义：

    lm.helloworld.id
    <code:
        const protobuf::Descriptor *desc = importer_.pool()->FindMessageTypeByName(“lm.helloworld”); 
        const protobuf::FieldDescriptor* field = desc->pool()->FindFileByName (“id”);
    >
    Descriptor，FieldDescriptor 的各种方法和属性，应用程序可以获得各种关于 Message 定义的信息。比如通过 field->name() 得到 field 的名字,即可动态定义消息

7.编写新的 proto 编译器

    类 CommandLineInterface 封装了 protoc 编译器的前端，包括命令行参数的解析，proto 文件的编译等功能。您所需要做的是实现类 CodeGenerator 的派生类，
    实现诸如代码生成等后端工作：


8.Google Protocol Buffer 的 Encoding


9.封解包的速度
